C51 COMPILER V7.01  BARRENKALAHEAPCALC                                                     01/19/2013 07:30:55 PAGE 1   


C51 COMPILER V7.01, COMPILATION OF MODULE BARRENKALAHEAPCALC
OBJECT MODULE PLACED IN .\Debug\Output\barrenkalaheapcalc.obj
COMPILER INVOKED BY: C:\Keil51\C51\BIN\C51.EXE misc\barrenkalaheapcalc.c LARGE OMF2 OPTIMIZE(SIZE) REGFILE(.\Debug\Outpu
                    -t\Yggdrasil20.ORC) BROWSE NOINTVECTOR DEBUG PRINT(.\Debug\List\barrenkalaheapcalc.lst) OBJECT(.\Debug\Output\barrenkalah
                    -eapcalc.obj)

stmt level    source

   1          /* Program showing sample usage of the dynamic memory analysis library */
   2          
   3          #include <stdio.h>
   4          #include <stdlib.h>
   5          #include "../defs.h"
*** WARNING C245 IN LINE 4 OF MISC\../DEFS.H: unknown #pragma, line ignored
*** WARNING C245 IN LINE 5 OF MISC\../DEFS.H: unknown #pragma, line ignored
*** WARNING C245 IN LINE 6 OF MISC\../DEFS.H: unknown #pragma, line ignored
*** WARNING C245 IN LINE 7 OF MISC\../DEFS.H: unknown #pragma, line ignored
   6          #include "barrenkalaheapcalc.h"
   7          
   8          #ifndef SUCCESS
              #define SUCCESS 1
              #endif
  11          #ifndef FAIL
              #define FAIL    0 
              #endif
  14          #ifndef PLUS
  15          #define PLUS    1
  16          #endif
  17          #ifndef MINUS
  18          #define MINUS   0
  19          #endif
  20          
  21          
  22          #if HEAP_CALC==1
*** WARNING C322 IN LINE 22 OF misc\barrenkalaheapcalc.c: unknown identifier
              #define HASHSIZE 200
              #endif
  25          
  26          #if HEAP_CALC==1
*** WARNING C322 IN LINE 26 OF misc\barrenkalaheapcalc.c: unknown identifier
              /*static void * ptr_address[HASHSIZE];
              static int ptr_bytes[HASHSIZE]={0};
              static int num_of_malloc=0;
              static int num_of_free=0;*/
              #endif
  32          
  33          
  34          /****************************************************************************/
  35          #if HEAP_CALC==1
*** WARNING C322 IN LINE 35 OF misc\barrenkalaheapcalc.c: unknown identifier
              int barren_insert(void *ptr,int value)
              {    
                      /*int i=0;
                      num_of_malloc++;
                      for( i =0; i < HASHSIZE; i++ ) {
                              if(ptr_bytes[i] == 99 ) {
                                      ptr_address[i] = ptr;
                                      ptr_bytes[i] = value;
                                      barren_update(value,PLUS);
                                      return SUCCESS;
                              }
C51 COMPILER V7.01  BARRENKALAHEAPCALC                                                     01/19/2013 07:30:55 PAGE 2   

                      }
                      printf("WARNING : insert to hashtable failed ptr = %u and size = %d\n", ptr,value);*/
                      return FAIL; 
              }
              
              /****************************************************************************/
              int barren_eject(void *ptr)
              {
                      /*int i=0;
                      int tempvalue=0;
                      if(ptr==NULL) {
                              printf("WARNING : NULL pointer encountered by eject\n");
                              return SUCCESS;
                              }
                      num_of_free++;
                      for( i =0; i < HASHSIZE; i++ ) {
                              if(ptr_address[i] == ptr)  {
                                      ptr_address[i] = (void *)99;
                                      tempvalue = ptr_bytes[i];
                                      ptr_bytes[i] = 99;
                                      barren_update(tempvalue,MINUS);
                                      return SUCCESS;
                              }
                      }
                      printf("WARNING : eject to hashtable failed\n ptr = %u\n", ptr); */
                      return FAIL;
              }
              
              /****************************************************************************/
              void hash_init(void)
              {
                      /*int i=0;
                      for(i=0;i<HASHSIZE;i++) {
                              ptr_address[i]=(void *)99;
                              ptr_bytes[i]=99;
                      }  */
              }
              
              /****************************************************************************/
              void barren_update(int val,int operation)
              {
                      /*static int max_malloc=0,peak_max_malloc=0;
                      if(operation==PLUS) {
                              max_malloc=max_malloc+val;
                      } else if(operation==MINUS) {
                              max_malloc=max_malloc-val;
                      }
                      if(peak_max_malloc<max_malloc) {
                              peak_max_malloc=max_malloc;
                      }
                      printf("INFO : current heap size = % 4d byte, maximum allocated heap = % 4d byte\n",max_malloc,peak_max_m
             -alloc);*/
              }   
                
              /* This function is not necessary, its meant to dump the current snapshot of the hash table for debugging 
             -purposes */
              void scan(void)
              {
                      /*int i=0;
                      printf("INFO : scan hashtable contents \n");
                      for( i =0; i < HASHSIZE; i++ ) {
                              printf("\t ptr=%u, size=%d \n",ptr_address[i],ptr_bytes[i]);
C51 COMPILER V7.01  BARRENKALAHEAPCALC                                                     01/19/2013 07:30:55 PAGE 3   

                      }*/
              }
              #endif
 110          
 111          /****************************************************************************/
 112          /*int main(void)
 113          {
 114                          int *ptr[100] = {0}, i=0;
 115                          hash_init();
 116                  
 117                  printf("start…\n");
 118                          
 119                  for (i  = 0; i < 50; i++) {
 120                          ptr[i]=malloc(sizeof(int));
 121                      insert(ptr[i],sizeof(int));
 122                  }
 123                  
 124                  for(i = 0;i < 49; i++) {
 125                          free(ptr[i]);
 126                      eject(ptr[i]);
 127                  }
 128          }*/
 129          
 130          /************************************************************ 
 131                                                          OUTPUT
 132          *************************************************************
 133          $ ./tryal
 134          start…
 135          INFO:In function update() Max_malloc = 4 Peak max malloc = 4
 136          INFO:In function update() Max_malloc = 8 Peak max malloc = 8
 137          INFO:In function update() Max_malloc = 12 Peak max malloc = 12
 138          INFO:In function update() Max_malloc = 16 Peak max malloc = 16
 139          INFO:In function update() Max_malloc = 20 Peak max malloc = 20
 140          INFO:In function update() Max_malloc = 24 Peak max malloc = 24
 141          INFO:In function update() Max_malloc = 28 Peak max malloc = 28
 142          INFO:In function update() Max_malloc = 32 Peak max malloc = 32
 143          INFO:In function update() Max_malloc = 36 Peak max malloc = 36
 144          INFO:In function update() Max_malloc = 40 Peak max malloc = 40
 145          INFO:In function update() Max_malloc = 44 Peak max malloc = 44
 146          INFO:In function update() Max_malloc = 48 Peak max malloc = 48
 147          INFO:In function update() Max_malloc = 52 Peak max malloc = 52
 148          INFO:In function update() Max_malloc = 56 Peak max malloc = 56
 149          INFO:In function update() Max_malloc = 60 Peak max malloc = 60
 150          INFO:In function update() Max_malloc = 64 Peak max malloc = 64
 151          INFO:In function update() Max_malloc = 68 Peak max malloc = 68
 152          INFO:In function update() Max_malloc = 72 Peak max malloc = 72
 153          INFO:In function update() Max_malloc = 76 Peak max malloc = 76
 154          INFO:In function update() Max_malloc = 80 Peak max malloc = 80
 155          INFO:In function update() Max_malloc = 84 Peak max malloc = 84
 156          INFO:In function update() Max_malloc = 88 Peak max malloc = 88
 157          INFO:In function update() Max_malloc = 92 Peak max malloc = 92
 158          INFO:In function update() Max_malloc = 96 Peak max malloc = 96
 159          INFO:In function update() Max_malloc = 100 Peak max malloc = 100
 160          INFO:In function update() Max_malloc = 104 Peak max malloc = 104
 161          INFO:In function update() Max_malloc = 108 Peak max malloc = 108
 162          INFO:In function update() Max_malloc = 112 Peak max malloc = 112
 163          INFO:In function update() Max_malloc = 116 Peak max malloc = 116
 164          INFO:In function update() Max_malloc = 120 Peak max malloc = 120
 165          INFO:In function update() Max_malloc = 124 Peak max malloc = 124
 166          INFO:In function update() Max_malloc = 128 Peak max malloc = 128
 167          INFO:In function update() Max_malloc = 132 Peak max malloc = 132
 168          INFO:In function update() Max_malloc = 136 Peak max malloc = 136
C51 COMPILER V7.01  BARRENKALAHEAPCALC                                                     01/19/2013 07:30:55 PAGE 4   

 169          INFO:In function update() Max_malloc = 140 Peak max malloc = 140
 170          INFO:In function update() Max_malloc = 144 Peak max malloc = 144
 171          INFO:In function update() Max_malloc = 148 Peak max malloc = 148
 172          INFO:In function update() Max_malloc = 152 Peak max malloc = 152
 173          INFO:In function update() Max_malloc = 156 Peak max malloc = 156
 174          INFO:In function update() Max_malloc = 160 Peak max malloc = 160
 175          INFO:In function update() Max_malloc = 164 Peak max malloc = 164
 176          INFO:In function update() Max_malloc = 168 Peak max malloc = 168
 177          INFO:In function update() Max_malloc = 172 Peak max malloc = 172
 178          INFO:In function update() Max_malloc = 176 Peak max malloc = 176
 179          INFO:In function update() Max_malloc = 180 Peak max malloc = 180
 180          INFO:In function update() Max_malloc = 184 Peak max malloc = 184
 181          INFO:In function update() Max_malloc = 188 Peak max malloc = 188
 182          INFO:In function update() Max_malloc = 192 Peak max malloc = 192
 183          INFO:In function update() Max_malloc = 196 Peak max malloc = 196
 184          INFO:In function update() Max_malloc = 200 Peak max malloc = 200
 185          INFO:In function update() Max_malloc = 196 Peak max malloc = 200
 186          INFO:In function update() Max_malloc = 192 Peak max malloc = 200
 187          INFO:In function update() Max_malloc = 188 Peak max malloc = 200
 188          INFO:In function update() Max_malloc = 184 Peak max malloc = 200
 189          INFO:In function update() Max_malloc = 180 Peak max malloc = 200
 190          INFO:In function update() Max_malloc = 176 Peak max malloc = 200
 191          INFO:In function update() Max_malloc = 172 Peak max malloc = 200
 192          INFO:In function update() Max_malloc = 168 Peak max malloc = 200
 193          INFO:In function update() Max_malloc = 164 Peak max malloc = 200
 194          INFO:In function update() Max_malloc = 160 Peak max malloc = 200
 195          INFO:In function update() Max_malloc = 156 Peak max malloc = 200
 196          INFO:In function update() Max_malloc = 152 Peak max malloc = 200
 197          INFO:In function update() Max_malloc = 148 Peak max malloc = 200
 198          INFO:In function update() Max_malloc = 144 Peak max malloc = 200
 199          INFO:In function update() Max_malloc = 140 Peak max malloc = 200
 200          INFO:In function update() Max_malloc = 136 Peak max malloc = 200
 201          INFO:In function update() Max_malloc = 132 Peak max malloc = 200
 202          INFO:In function update() Max_malloc = 128 Peak max malloc = 200
 203          INFO:In function update() Max_malloc = 124 Peak max malloc = 200
 204          INFO:In function update() Max_malloc = 120 Peak max malloc = 200
 205          INFO:In function update() Max_malloc = 116 Peak max malloc = 200
 206          INFO:In function update() Max_malloc = 112 Peak max malloc = 200
 207          INFO:In function update() Max_malloc = 108 Peak max malloc = 200
 208          INFO:In function update() Max_malloc = 104 Peak max malloc = 200
 209          INFO:In function update() Max_malloc = 100 Peak max malloc = 200
 210          INFO:In function update() Max_malloc = 96 Peak max malloc = 200
 211          INFO:In function update() Max_malloc = 92 Peak max malloc = 200
 212          INFO:In function update() Max_malloc = 88 Peak max malloc = 200
 213          INFO:In function update() Max_malloc = 84 Peak max malloc = 200
 214          INFO:In function update() Max_malloc = 80 Peak max malloc = 200
 215          INFO:In function update() Max_malloc = 76 Peak max malloc = 200
 216          INFO:In function update() Max_malloc = 72 Peak max malloc = 200
 217          INFO:In function update() Max_malloc = 68 Peak max malloc = 200
 218          INFO:In function update() Max_malloc = 64 Peak max malloc = 200
 219          INFO:In function update() Max_malloc = 60 Peak max malloc = 200
 220          INFO:In function update() Max_malloc = 56 Peak max malloc = 200
 221          INFO:In function update() Max_malloc = 52 Peak max malloc = 200
 222          INFO:In function update() Max_malloc = 48 Peak max malloc = 200
 223          INFO:In function update() Max_malloc = 44 Peak max malloc = 200
 224          INFO:In function update() Max_malloc = 40 Peak max malloc = 200
 225          INFO:In function update() Max_malloc = 36 Peak max malloc = 200
 226          INFO:In function update() Max_malloc = 32 Peak max malloc = 200
 227          INFO:In function update() Max_malloc = 28 Peak max malloc = 200
 228          INFO:In function update() Max_malloc = 24 Peak max malloc = 200
 229          INFO:In function update() Max_malloc = 20 Peak max malloc = 200
 230          INFO:In function update() Max_malloc = 16 Peak max malloc = 200
C51 COMPILER V7.01  BARRENKALAHEAPCALC                                                     01/19/2013 07:30:55 PAGE 5   

 231          INFO:In function update() Max_malloc = 12 Peak max malloc = 200
 232          INFO:In function update() Max_malloc = 8 Peak max malloc = 200
 233          INFO:In function update() Max_malloc = 4 Peak max malloc = 200
 234          */
 235          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  7 WARNING(S),  0 ERROR(S)
