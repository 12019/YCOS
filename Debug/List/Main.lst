C51 COMPILER V7.01  MAIN                                                                   01/27/2014 09:14:17 PAGE 1   


C51 COMPILER V7.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN 8051SYS\Main.OBJ
COMPILER INVOKED BY: C:\Keil51\C51\BIN\C51.EXE 8051SYS\Main.c LARGE OMF2 OPTIMIZE(0,SIZE) BROWSE NOINTVECTOR DEBUG PRINT
                    -(.\Debug\List\Main.lst) SRC(.\Debug\Output\Main.SRC)

stmt level    source

   1          
   2          #include        "_17BD_UserCode.h"  
   3          #include        "defs.h"
   4          #include        "..\ISO7816\ISO7816.h"
   5          #include        "..\NORFlash\NORFlash.h"
   6          #include        "..\yggdrasil\yggdrasil.h"
   7          #include        <intrins.h>
   8          
   9          //BYTE  ISO7816_Time;
  10          
  11          uint16 _tick_counter = 0;
  12          //extern uint16 C_XBP;
  13          //====================================================
  14          //      Timer 0 interrutp service routine
  15          //extern void ISO7816_main(void);
  16          //extern void _C_START(void);
  17          /*void TMR0_ISR(void) interrupt 1
  18          {
  19                  IE_TMR0 = 0;
  20                  _tick_counter++;
  21                  if(_tick_counter < 300) { 
  22                          TH0 = 0xC3;                     //50000 clock, reload value
  23                          TL0 = 0x50;             
  24                          TCON_TF0 = 0;           //clear flag
  25                          IE_TMR0 = 1;
  26                  } else {
  27                          _iso7816_state =  ISO7816_STOP;                 //cancel pending operation
  28                          //#pragma       asm
  29                          TH0 = 0x00;                     //50000 clock, reload value
  30                          TL0 = 0x00;             
  31                          TCON_TF0 = 0;           //clear flag
  32                          IE_TMR0 = 0;
  33                          //SP = 0x23;
  34                          #pragma asm
  35                          POP 7;
  36                          POP 6;
  37                          POP ACC;
  38                          POP PSW ;
  39                          POP DPL0;
  40                          POP DPH0;
  41                          POP B;
  42                          POP ACC;
  43                          POP ACC;        //clear return address
  44                          POP ACC;
  45                          MOV DPTR, #ISO7816_Main;
  46                          PUSH DPL;
  47                          PUSH DPH;
  48                          RETI
  49                          //MOV SP, #023h;
  50                          //MOV PSW, #0;
  51                          //MOV A, #0;
  52                          //MOV B, #0;
  53                          //MOV   SP,#?STACK-1
  54                          //AJMP  ISO7816_Main;
C51 COMPILER V7.01  MAIN                                                                   01/27/2014 09:14:17 PAGE 2   

  55                          //LJMP  MAIN
  56                          #pragma endasm
  57                          //*((uchar *)(SP - 8)) = 0x20;
  58                          //*((uchar *)(SP - 8 + 1)) = 0x00;
  59                          //PC = 0x2000;
  60                  }
  61                  return;
  62          } */
  63          
  64          //====================================================
  65          //      Main process
  66          void    main(void)
  67          {       
  68   1              HW_Init();                                              //      H/W initial
  69   1              //ISO7816_Time = 0;                             //      0: 1st time,ATR
  70   1              ISO7816_init();
  71   1              //while(1)
  72   1              //{  
  73   1                      //if(ISO7816_Time > 0)
  74   1                      //{
  75   1                      //      Sleep_Mode();                   //      Power down mode after thread has been executed                  
  76   1                      //}
  77   1              ISO7816_main();
  78   1              //}
  79   1      }
  80          
  81          //====================================================
  82          //      ISO/IEC 7816 commands handling
  83          void    HW_Init(void)
  84          {
  85   1              IE_EA = 1;                                              //      Interrupt enabed by corresponding control bit
  86   1              IP = 0x00;                                              //      No priviledge
  87   1              UCR2 = 0x03;                                    //      Retry 3 times
  88   1              RNGCTL = 0x01;                                  //      Close RNG
  89   1              CLKCON = 0x01;                                  //      Open DES clock 
  90   1      }
  91          /*
  92          //====================================================
  93          //      Copy memory
  94          void    mem_cpy(BYTE * dst,BYTE * src,USHORT len)
  95          {
  96                  USHORT  i;
  97          
  98                  for(i = 0;i < len;i ++)
  99                          dst[i] = *src++;
 100          }
 101          
 102          //====================================================
 103          //      Compare memory
 104          BYTE    mem_cmp(BYTE * dst,BYTE * src,USHORT len)
 105          {
 106                  USHORT  i;
 107          
 108                  for(i = 0;i < len;i ++)
 109                  {
 110                          if(dst[i] != *src++)
 111                                  return 0;
 112                  }
 113                  return 1;
 114          } 
 115          */
 116          
C51 COMPILER V7.01  MAIN                                                                   01/27/2014 09:14:17 PAGE 3   

 117          #define MEMXDATA        0x01
 118          #define MEMCODE         0xFF
 119          //====================================================
 120          //      Copy memory
 121          //      DPTR0   =       dst
 122          //      DPTR1   =       src
 123          //      R0              =       backupDPS
 124          //      R1 R2   =       length  
 125          #if 0
              void    mem_cpy(BYTE * dst, BYTE * src, USHORT len)
              {
                      if(*(BYTEX *)(&dst) == MEMXDATA)
                      {
                              switch(*(BYTEX *)(&src))
                              {
                                      case    MEMXDATA:                                                               //      XDATA to XDATA
                                      {       
                                              #pragma asm
                                                              MOV             R0,             DPS     
                                                              MOV             DPS,    0       
                                                              MOV             DPTR,   #?_MEM_CPY?BYTE+6       //      Get length
                                                              MOVX    A,              @DPTR
                                                              MOV             R1,             A
                                                              INC             DPTR
                                                              MOVX    A,              @DPTR
                                                              MOV             R2,             A
                                                              JZ              $+1+1+1
                                                              INC             R1
                                                              MOV             DPTR,   #?_MEM_CPY?BYTE+1       //      DPTR 0 for dst
                                                              MOVX    A,              @DPTR
                                                              MOV             R3,             A
                                                              INC             DPTR
                                                              MOVX    A,              @DPTR
                                                              MOV             DPL0,   A
                                                              MOV             DPH0,   R3
                                                              INC             DPS
                                                              MOV             DPTR,   #?_MEM_CPY?BYTE+4       //      DPTR 1 for src
                                                              MOVX    A,              @DPTR
                                                              MOV             R3,             A
                                                              INC             DPTR
                                                              MOVX    A,              @DPTR
                                                              MOV             DPL1,   A
                                                              MOV             DPH1,   R3
                                                              MOV             DPS,    #01H
                                                      LOOP_CPY_X:
                                                              MOVX    A,              @DPTR                           //      DPTR 0 for dst
                                                              INC             DPTR
                                                              INC             DPS
                                                              MOVX    @DPTR,  A                                       //      DPTR 1 for src
                                                              INC             DPTR
                                                              INC             DPS
                                                              DJNZ    R2,             LOOP_CPY_X
                                                              DJNZ    R1,             LOOP_CPY_X
                                                              MOV             DPS,    R0                      
                                              #pragma endasm    
                                              break;
                                      }       
                                      case    MEMCODE:                                                                //      CODE to XDATA
                                      {
                                              #pragma asm
                                                              MOV             R0,             DPS     
                                                              MOV             DPS,    0       
C51 COMPILER V7.01  MAIN                                                                   01/27/2014 09:14:17 PAGE 4   

                                                              MOV             DPTR,   #?_MEM_CPY?BYTE+6       //      Get length
                                                              MOVX    A,              @DPTR
                                                              MOV             R1,             A
                                                              INC             DPTR
                                                              MOVX    A,              @DPTR
                                                              MOV             R2,             A
                                                              JZ              $+1+1+1
                                                              INC             R1
                                                              MOV             DPTR,   #?_MEM_CPY?BYTE+1       //      DPTR 0 for dst
                                                              MOVX    A,              @DPTR
                                                              MOV             R3,             A
                                                              INC             DPTR
                                                              MOVX    A,              @DPTR
                                                              MOV             DPL0,   A
                                                              MOV             DPH0,   R3
                                                              INC             DPS
                                                              MOV             DPTR,   #?_MEM_CPY?BYTE+4       //      DPTR 1 for src
                                                              MOVX    A,              @DPTR
                                                              MOV             R3,             A
                                                              INC             DPTR
                                                              MOVX    A,              @DPTR
                                                              MOV             DPL1,   A
                                                              MOV             DPH1,   R3
                                                              MOV             DPS,    #01H
                                                      LOOP_CPY_C:
                                                              CLR             A
                                                              MOVC    A,              @A+DPTR                         //      DPTR 0 for dst
                                                              INC             DPTR
                                                              INC             DPS
                                                              MOVX    @DPTR,  A                                       //      DPTR 1 for src
                                                              INC             DPTR
                                                              INC             DPS
                                                              DJNZ    R2,             LOOP_CPY_C
                                                              DJNZ    R1,             LOOP_CPY_C      
                                                              MOV             DPS,    R0              
                                              #pragma endasm   
                                              break;
                                      }       
                              }
                      }
                      else
                              while(1);                                                                                       //      ERROR
              }
              
              //====================================================
              //      Compare memory
              //      DPTR0   =       dst
              //      DPTR1   =       src
              //      R0              =       backupDPS
              //      R1 R2   =       length
              //      R3              =       compare data
              BYTE    mem_cmp(BYTE * dst,BYTE * src,USHORT len)
              {
                      if(*(BYTEX *)(&dst) == MEMXDATA)
                      {
                              switch(*(BYTEX *)(&src))
                              {
                                      case    MEMXDATA:                                                               //      XDATA vs XDATA          
                                      {       
                                              #pragma asm     
                                                              MOV             R0,             DPS     
                                                              MOV             DPS,    0       
C51 COMPILER V7.01  MAIN                                                                   01/27/2014 09:14:17 PAGE 5   

                                                              MOV             DPTR,   #?_MEM_CMP?BYTE+6       //      Get length
                                                              MOVX    A,              @DPTR
                                                              MOV             R1,             A
                                                              INC             DPTR
                                                              MOVX    A,              @DPTR
                                                              MOV             R2,             A
                                                              JZ              $+1+1+1
                                                              INC             R1
                                                              MOV             DPTR,   #?_MEM_CMP?BYTE+1       //      DPTR 0 for dst
                                                              MOVX    A,              @DPTR
                                                              MOV             R3,             A
                                                              INC             DPTR
                                                              MOVX    A,              @DPTR
                                                              MOV             DPL0,   A
                                                              MOV             DPH0,   R3
                                                              INC             DPS
                                                              MOV             DPTR,   #?_MEM_CMP?BYTE+4       //      DPTR 1 for src
                                                              MOVX    A,              @DPTR
                                                              MOV             R3,             A
                                                              INC             DPTR
                                                              MOVX    A,              @DPTR
                                                              MOV             DPL1,   A
                                                              MOV             DPH1,   R3
                                                              INC             DPS
                                                      LOOP_CMP_XX:
                                                              MOVX    A,              @DPTR                           //      DPTR 0
                                                              MOV             R3,             A                                
                                                              INC             DPTR
                                                              INC             DPS
                                                              MOVX    A,              @DPTR                           //      DPTR 1
                                                              INC             DPTR
                                                              INC             DPS
                                                              CLR             C
                                                              SUBB    A,              R3
                                                              JZ              CONTINUE_XX
                                                              MOV             R7,             0
                                                              MOV             DPS,    R0      
                                                              RET
                                                      CONTINUE_XX:
                                                              DJNZ    R2,             LOOP_CMP_XX
                                                              DJNZ    R1,             LOOP_CMP_XX
                                                              MOV             DPS,    R0                      
                                              #pragma endasm                                  
                                              break;
                                      }
                                      case    MEMCODE:                                                                //      XDATA vs CODE           
                                      {       
                                              #pragma asm     
                                                              MOV             R0,             DPS     
                                                              MOV             DPS,    0       
                                                              MOV             DPTR,   #?_MEM_CMP?BYTE+6       //      Get length
                                                              MOVX    A,              @DPTR
                                                              MOV             R1,             A
                                                              INC             DPTR
                                                              MOVX    A,              @DPTR
                                                              MOV             R2,             A
                                                              JZ              $+1+1+1
                                                              INC             R1
                                                              MOV             DPTR,   #?_MEM_CMP?BYTE+1       //      DPTR 0 for dst
                                                              MOVX    A,              @DPTR
                                                              MOV             R3,             A
                                                              INC             DPTR
C51 COMPILER V7.01  MAIN                                                                   01/27/2014 09:14:17 PAGE 6   

                                                              MOVX    A,              @DPTR
                                                              MOV             DPL0,   A
                                                              MOV             DPH0,   R3
                                                              INC             DPS
                                                              MOV             DPTR,   #?_MEM_CMP?BYTE+4       //      DPTR 1 for src
                                                              MOVX    A,              @DPTR
                                                              MOV             R3,             A
                                                              INC             DPTR
                                                              MOVX    A,              @DPTR
                                                              MOV             DPL1,   A
                                                              MOV             DPH1,   R3
                                                              INC             DPS
                                                      LOOP_CMP_CX:
                                                              MOVX    A,              @DPTR                           //      DPTR 0
                                                              MOV             R3,             A                                
                                                              INC             DPTR
                                                              INC             DPS
                                                              CLR             A
                                                              MOVC    A,              @A+DPTR                         //      DPTR 1
                                                              INC             DPTR
                                                              INC             DPS
                                                              CLR             C
                                                              SUBB    A,              R3
                                                              JZ              CONTINUE_CX
                                                              MOV             R7,             0
                                                              MOV             DPS,    R0      
                                                              RET
                                                      CONTINUE_CX:
                                                              DJNZ    R2,             LOOP_CMP_CX
                                                              DJNZ    R1,             LOOP_CMP_CX
                                                              MOV             DPS,    R0                      
                                              #pragma endasm                                  
                                              break;
                                      }
                              }
                      }
                      else if(*(BYTEX *)(&dst) == MEMCODE)
                      {
                              switch(*(BYTEX *)(&src))
                              {
                                      case    MEMXDATA:                                                               //      CODE vs XDATA                           
                                      {       
                                              #pragma asm     
                                                              MOV             R0,             DPS     
                                                              MOV             DPS,    0       
                                                              MOV             DPTR,   #?_MEM_CMP?BYTE+6       //      Get length
                                                              MOVX    A,              @DPTR
                                                              MOV             R1,             A
                                                              INC             DPTR
                                                              MOVX    A,              @DPTR
                                                              MOV             R2,             A
                                                              JZ              $+1+1+1
                                                              INC             R1
                                                              MOV             DPTR,   #?_MEM_CMP?BYTE+1       //      DPTR 0 for dst
                                                              MOVX    A,              @DPTR
                                                              MOV             R3,             A
                                                              INC             DPTR
                                                              MOVX    A,              @DPTR
                                                              MOV             DPL0,   A
                                                              MOV             DPH0,   R3
                                                              INC             DPS
                                                              MOV             DPTR,   #?_MEM_CMP?BYTE+4       //      DPTR 1 for src
C51 COMPILER V7.01  MAIN                                                                   01/27/2014 09:14:17 PAGE 7   

                                                              MOVX    A,              @DPTR
                                                              MOV             R3,             A
                                                              INC             DPTR
                                                              MOVX    A,              @DPTR
                                                              MOV             DPL1,   A
                                                              MOV             DPH1,   R3
                                                              INC             DPS
                                                      LOOP_CMP_XC:
                                                              CLR             A
                                                              MOVC    A,              @A+DPTR                         //      DPTR 0
                                                              MOV             R3,             A                                
                                                              INC             DPTR
                                                              INC             DPS
                                                              MOVX    A,              @DPTR                           //      DPTR 1
                                                              INC             DPTR
                                                              INC             DPS
                                                              CLR             C
                                                              SUBB    A,              R3
                                                              JZ              CONTINUE_XC
                                                              MOV             R7,             0
                                                              MOV             DPS,    R0      
                                                              RET
                                                      CONTINUE_XC:
                                                              DJNZ    R2,             LOOP_CMP_XC
                                                              DJNZ    R1,             LOOP_CMP_XC
                                                              MOV             DPS,    R0                      
                                              #pragma endasm                                  
                                              break;
                                      }
                                      case    MEMCODE:                                                                //      CODE vs CODE            
                                      {       
                                              #pragma asm     
                                                              MOV             R0,             DPS     
                                                              MOV             DPS,    0       
                                                              MOV             DPTR,   #?_MEM_CMP?BYTE+6       //      Get length
                                                              MOVX    A,              @DPTR
                                                              MOV             R1,             A
                                                              INC             DPTR
                                                              MOVX    A,              @DPTR
                                                              MOV             R2,             A
                                                              JZ              $+1+1+1
                                                              INC             R1
                                                              MOV             DPTR,   #?_MEM_CMP?BYTE+1       //      DPTR 0 for dst
                                                              MOVX    A,              @DPTR
                                                              MOV             R3,             A
                                                              INC             DPTR
                                                              MOVX    A,              @DPTR
                                                              MOV             DPL0,   A
                                                              MOV             DPH0,   R3
                                                              INC             DPS
                                                              MOV             DPTR,   #?_MEM_CMP?BYTE+4       //      DPTR 1 for src
                                                              MOVX    A,              @DPTR
                                                              MOV             R3,             A
                                                              INC             DPTR
                                                              MOVX    A,              @DPTR
                                                              MOV             DPL1,   A
                                                              MOV             DPH1,   R3
                                                              INC             DPS
                                                      LOOP_CMP_CC:
                                                              CLR             A
                                                              MOVC    A,              @A+DPTR                         //      DPTR 0
                                                              MOV             R3,             A                                
C51 COMPILER V7.01  MAIN                                                                   01/27/2014 09:14:17 PAGE 8   

                                                              INC             DPTR
                                                              INC             DPS
                                                              CLR             A
                                                              MOVC    A,              @A+DPTR                         //      DPTR 1
                                                              INC             DPTR
                                                              INC             DPS
                                                              CLR             C
                                                              SUBB    A,              R3
                                                              JZ              CONTINUE_CC
                                                              MOV             R7,             0
                                                              MOV             DPS,    R0      
                                                              RET
                                                      CONTINUE_CC:
                                                              DJNZ    R2,             LOOP_CMP_CC
                                                              DJNZ    R1,             LOOP_CMP_CC
                                                              MOV             DPS,    R0                      
                                              #pragma endasm                                  
                                              break;
                                      }
                              }
                      }
                      else
                              while(1);
              
                      return 1;
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     25    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
