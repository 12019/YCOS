; .\Debug\Output\ISO7816_Main.SRC generated from: ISO7816\ISO7816_Main.c
; COMPILER INVOKED BY:
;        C:\Keil51\C51\BIN\C51.EXE ISO7816\ISO7816_Main.c LARGE OMF2 OPTIMIZE(0,SIZE) REGFILE(.\Debug\Output\Yggdrasil20.ORC) BROWSE NOINTVECTOR DEBUG PRINT(.\Debug\List\ISO7816_Main.lst) SRC(.\Debug\Output\ISO7816_Main.SRC)

$NOMOD51

NAME	ISO7816_MAIN

UIMSK	DATA	0DCH
FL_SDP1	DATA	0E9H
FL_SDP2	DATA	0EAH
DPH0	DATA	083H
IE_INT3	BIT	0A8H.3
IE	DATA	0A8H
DPH1	DATA	085H
IE_INT5	BIT	0A8H.5
DPL0	DATA	082H
DPL1	DATA	084H
IE_TMR0	BIT	0A8H.1
DES_END	BIT	0C0H.3
IP	DATA	0B8H
UCR2	DATA	0DEH
UCR3	DATA	0DDH
FL_STS_F_CHKFF_ERR	BIT	0E8H.2
SP	DATA	081H
DES_DATEN	BIT	0C0H.5
IE_UART	BIT	0A8H.2
UBRC	DATA	0DAH
PCON	DATA	087H
FL_STS_F_OVER	BIT	0E8H.0
CRCDAT	DATA	0C2H
UBUF	DATA	0D9H
TMOD	DATA	089H
TCON	DATA	088H
MMU_SEL	DATA	0C3H
USR_TBE	BIT	0D8H.0
CLKCON	DATA	086H
CHIPSC	DATA	0DBH
CLKSEL	DATA	08FH
DESCTL	DATA	0C0H
B	DATA	0F0H
RNGDAT	DATA	0E2H
ACC	DATA	0E0H
IE_DES	BIT	0A8H.0
RNGCTL	DATA	0E1H
TH0	DATA	08CH
DES_START	BIT	0C0H.0
TL0	DATA	08AH
WDTCON	DATA	0A5H
DESD0	DATA	0F8H
DESD1	DATA	0F9H
DESD2	DATA	0FAH
FL_CON	DATA	0EBH
DESD3	DATA	0FBH
SFR80	DATA	080H
DESD4	DATA	0FCH
SFR90	DATA	090H
SFR81	DATA	081H
DESD5	DATA	0FDH
SFR91	DATA	091H
SFR82	DATA	082H
DESD6	DATA	0FEH
SFR92	DATA	092H
SFR83	DATA	083H
DESD7	DATA	0FFH
SFR93	DATA	093H
SFR84	DATA	084H
SFR94	DATA	094H
SFR85	DATA	085H
SFR95	DATA	095H
SFR86	DATA	086H
SFR96	DATA	096H
SFR87	DATA	087H
DPH	DATA	083H
SFR97	DATA	097H
SFR88	DATA	088H
SFRA0	DATA	0A0H
SFR98	DATA	098H
SFR89	DATA	089H
FL_STS_F_OP_ERR	BIT	0E8H.1
IE_FLASH	BIT	0A8H.4
IE_WDT	BIT	0A8H.6
SFRB0	DATA	0B0H
SFRA1	DATA	0A1H
SFR99	DATA	099H
SFRC0	DATA	0C0H
SFRB1	DATA	0B1H
SFRA2	DATA	0A2H
TCON_TF0	BIT	088H.5
DPL	DATA	082H
SFRD0	DATA	0D0H
SFRC1	DATA	0C1H
SFRB2	DATA	0B2H
SFRA3	DATA	0A3H
SFRE0	DATA	0E0H
SFRD1	DATA	0D1H
SFRC2	DATA	0C2H
SFRB3	DATA	0B3H
SFRA4	DATA	0A4H
BANK_SEL	DATA	0EFH
SFRF0	DATA	0F0H
SFRE1	DATA	0E1H
SFRD2	DATA	0D2H
SFRC3	DATA	0C3H
SFRB4	DATA	0B4H
SFRA5	DATA	0A5H
DES_MODE	BIT	0C0H.1
SFRF1	DATA	0F1H
SFRE2	DATA	0E2H
SFRD3	DATA	0D3H
SFRC4	DATA	0C4H
SFRB5	DATA	0B5H
SFRA6	DATA	0A6H
FL_PATCH	DATA	0E7H
SFRF2	DATA	0F2H
SFRE3	DATA	0E3H
SFRD4	DATA	0D4H
SFRC5	DATA	0C5H
SFRB6	DATA	0B6H
SFRA7	DATA	0A7H
SFRF3	DATA	0F3H
SFRE4	DATA	0E4H
SFRD5	DATA	0D5H
SFRC6	DATA	0C6H
SFRB7	DATA	0B7H
SFRA8	DATA	0A8H
SFR8A	DATA	08AH
SFRF4	DATA	0F4H
SFRE5	DATA	0E5H
SFRD6	DATA	0D6H
SFRC7	DATA	0C7H
SFRB8	DATA	0B8H
SFRA9	DATA	0A9H
SFR9A	DATA	09AH
SFR8B	DATA	08BH
DPS	DATA	0A2H
SFRF5	DATA	0F5H
SFRE6	DATA	0E6H
SFRD7	DATA	0D7H
SFRC8	DATA	0C8H
SFRB9	DATA	0B9H
SFR9B	DATA	09BH
SFR8C	DATA	08CH
SFRF6	DATA	0F6H
SFRE7	DATA	0E7H
SFRD8	DATA	0D8H
SFRC9	DATA	0C9H
SFR9C	DATA	09CH
SFR8D	DATA	08DH
SFRF7	DATA	0F7H
SFRE8	DATA	0E8H
SFRD9	DATA	0D9H
SFR9D	DATA	09DH
SFR8E	DATA	08EH
WDTRST	DATA	0A6H
UCR	DATA	0DFH
SFRF8	DATA	0F8H
SFRE9	DATA	0E9H
SFR9E	DATA	09EH
SFR8F	DATA	08FH
FDCON	DATA	0E3H
SFRF9	DATA	0F9H
SFR9F	DATA	09FH
DES_KEY1EN	BIT	0C0H.6
TCON_TR0	BIT	088H.4
DES_KEY2EN	BIT	0C0H.7
FL_STS	DATA	0E8H
DES_TDES	BIT	0C0H.2
BANK_NUM	DATA	0EEH
SFRAA	DATA	0AAH
SFRBA	DATA	0BAH
SFRAB	DATA	0ABH
SFRCA	DATA	0CAH
SFRBB	DATA	0BBH
SFRAC	DATA	0ACH
SFRDA	DATA	0DAH
SFRCB	DATA	0CBH
SFRBC	DATA	0BCH
SFRAD	DATA	0ADH
rP0	DATA	080H
SFREA	DATA	0EAH
SFRDB	DATA	0DBH
SFRCC	DATA	0CCH
SFRBD	DATA	0BDH
SFRAE	DATA	0AEH
rP1	DATA	090H
SFRFA	DATA	0FAH
SFREB	DATA	0EBH
SFRDC	DATA	0DCH
SFRCD	DATA	0CDH
SFRBE	DATA	0BEH
SFRAF	DATA	0AFH
IE_EA	BIT	0A8H.7
rP2	DATA	0A0H
SFRFB	DATA	0FBH
SFREC	DATA	0ECH
SFRDD	DATA	0DDH
SFRCE	DATA	0CEH
SFRBF	DATA	0BFH
rP3	DATA	0B0H
SFRFC	DATA	0FCH
SFRED	DATA	0EDH
SFRDE	DATA	0DEH
SFRCF	DATA	0CFH
SFRFD	DATA	0FDH
SFREE	DATA	0EEH
SFRDF	DATA	0DFH
SFRFE	DATA	0FEH
SFREF	DATA	0EFH
SFRFF	DATA	0FFH
USR	DATA	0D8H
SLEEP	DATA	097H
PSW	DATA	0D0H
VDCON	DATA	0DBH
?PR?ISO7816_init?ISO7816_MAIN            SEGMENT CODE 
?PR?ISO7816_case?ISO7816_MAIN            SEGMENT CODE 
?PR?ISO7816_main?ISO7816_MAIN            SEGMENT CODE 
?XD?ISO7816_main?ISO7816_MAIN            SEGMENT XDATA 
?PR?Send_ATR?ISO7816_MAIN                SEGMENT CODE 
?PR?RcvAPDU?ISO7816_MAIN                 SEGMENT CODE 
?PR?_Command_Interpreter?ISO7816_MAIN    SEGMENT CODE 
?XD?_Command_Interpreter?ISO7816_MAIN    SEGMENT XDATA 
?PR?_GSM_Handler?ISO7816_MAIN            SEGMENT CODE 
?XD?_GSM_Handler?ISO7816_MAIN            SEGMENT XDATA 
?PR?_PPS_Handler?ISO7816_MAIN            SEGMENT CODE 
?XD?_PPS_Handler?ISO7816_MAIN            SEGMENT XDATA 
?PR?CMMD_Handle?ISO7816_MAIN             SEGMENT CODE 
?PR?_TxStatus?ISO7816_MAIN               SEGMENT CODE 
?XD?_TxStatus?ISO7816_MAIN               SEGMENT XDATA 
?CO?ISO7816_MAIN     SEGMENT CONST 
?XD?ISO7816_MAIN     SEGMENT XDATA 
	EXTRN	CODE (receive_byte)
	EXTRN	CODE (Load_User_App)
	EXTRN	CODE (Initialize_Operating_System)
	EXTRN	XDATA (_os_config)
	EXTRN	CODE (_send_byte)
	EXTRN	CODE (Initialize_Hardware)
	EXTRN	CODE (_IoInit)
	EXTRN	CODE (_Yggdrasil_Decode)
	EXTRN	CODE (StartTimeoutSequence)
	EXTRN	CODE (gsm_class_case)
	EXTRN	CODE (EndTimeoutSequence)
	EXTRN	CODE (yggdrasil_class_case)
	EXTRN	CODE (_ioman_transmit)
	EXTRN	XDATA (?_ioman_transmit?BYTE)
	EXTRN	CODE (_ISO_AutoTxNULL)
	EXTRN	XDATA (response_length)
	EXTRN	CODE (_Set_PPS)
	EXTRN	CODE (Sleep_Mode)
	EXTRN	CODE (_Rx_n_Bytes)
	EXTRN	CODE (_Tx_n_Bytes)
	EXTRN	CODE (PPS)
	EXTRN	CODE (Save_State)
	EXTRN	CODE (?C?CCASE)
	PUBLIC	PPSFlag
	PUBLIC	Foffset
	PUBLIC	FlashBuffer
	PUBLIC	_iso7816_ins
	PUBLIC	_iso7816_cla
	PUBLIC	_iso7816_state
	PUBLIC	SWptr
	PUBLIC	iso7816_buffer
	PUBLIC	SW
	PUBLIC	ATR
	PUBLIC	_TxStatus
	PUBLIC	CMMD_Handle
	PUBLIC	_PPS_Handler
	PUBLIC	_GSM_Handler
	PUBLIC	_Command_Interpreter
	PUBLIC	RcvAPDU
	PUBLIC	Send_ATR
	PUBLIC	ISO7816_main
	PUBLIC	ISO7816_case
	PUBLIC	ISO7816_init

	RSEG  ?XD?_Command_Interpreter?ISO7816_MAIN
?_Command_Interpreter?BYTE:
     buffer?541:   DS   2

	RSEG  ?XD?_TxStatus?ISO7816_MAIN
?_TxStatus?BYTE:
        ptr?944:   DS   1

	RSEG  ?XD?ISO7816_main?ISO7816_MAIN
?ISO7816_main?BYTE:
         sw?240:   DS   2

	RSEG  ?XD?_GSM_Handler?ISO7816_MAIN
?_GSM_Handler?BYTE:
     buffer?642:   DS   2

	RSEG  ?XD?_PPS_Handler?ISO7816_MAIN
?_PPS_Handler?BYTE:
     buffer?743:   DS   2

	RSEG  ?XD?ISO7816_MAIN
 iso7816_buffer:   DS   262
          SWptr:   DS   1
 _iso7816_state:   DS   1
   _iso7816_cla:   DS   1
   _iso7816_ins:   DS   1
    FlashBuffer:   DS   512
        Foffset:   DS   2
        PPSFlag:   DS   1

	RSEG  ?CO?ISO7816_MAIN
ATR:
	DB	03BH
	DB	01AH
	DB	096H
	DB	000H
	DB	017H
	DB	0BDH
	DB	010H
	DB	059H
	DB	043H
	DB	04FH
	DB	053H
	DB	002H
	DB	000H

SW:
	DB	090H
	DB	000H
	DB	06DH
	DB	000H
	DB	06CH
	DB	000H
	DB	065H
	DB	001H
	DB	06AH
	DB	000H
	DB	065H
	DB	004H


	RSEG ?CO?ISO7816_MAIN
; 
; #include	"_17BD_UserCode.h"
; #include 	"defs.h"	
; #include 	"..\yggdrasil\yggdrasil.h"
; #include 	"..\drivers\ioman.h"
; #include	"..\ISO7816\ISO7816.h"
; #include	"..\NORFlash\NORFlash.h"
; 
; BYTE	SWptr;
; HALFWX	Foffset;
; BYTEX	PPSFlag;
; //BYTEX 	gCommand[5];
; //BYTEX	IOBuf[512];
; //BYTEX	FlashBuffer[512];
; uchar _iso7816_ins;
; uchar _iso7816_cla;
; BYTEX	_iso7816_state;
; BYTEX 	iso7816_buffer[262];
; BYTEX	IOBuf[512];
; //BYTEX	IOBuf[] = (iso7816_buffer+5);
; 
; //BYTEC	ATR[]={0x3B,0x18,0x96,0x00,0x17,0xBD,0x10,0x00,0x00,0x90,0x00};
; BYTEC	ATR[]={0x3B,0x1A,0x96,0x00,0x17,0xBD,0x10,0x59,0x43,0x4F,0x53,0x02,0x00};
; BYTEC	SW[12]={0x90,0x00,0x6D,0x00,0x6C,0x00,0x65,0x01,0x6A,0x00,0x65,0x04};
; //				   Success, Invalid INS, P3 err, Write err, P1P2 err, Verify err
; 
; void ISO7816_init(void) {

	RSEG  ?PR?ISO7816_init?ISO7816_MAIN
ISO7816_init:
	USING	0
			; SOURCE LINE # 27
; 	IE_EA = 1;				//global interrupt enable bit
			; SOURCE LINE # 28
	SETB 	IE_EA
; 	IE_UART = 1;			//enable uart interrupt
			; SOURCE LINE # 29
	SETB 	IE_UART
; 	CLKSEL = 0x80;			//30Mhz internal clock
			; SOURCE LINE # 30
	MOV  	CLKSEL,#080H
; 	//rP1=0;
; 	//MMU_SEL = 0;
; 	Initialize_Hardware();
			; SOURCE LINE # 33
	LCALL	Initialize_Hardware
; 	_iso7816_state = ISO7816_DORMANT;
			; SOURCE LINE # 34
	MOV  	DPTR,#_iso7816_state
	CLR  	A
	MOVX 	@DPTR,A
; }  
			; SOURCE LINE # 35
?C0001:
	RET  	
; END OF ISO7816_init

; 
; 
; uchar ISO7816_case(void) {

	RSEG  ?PR?ISO7816_case?ISO7816_MAIN
ISO7816_case:
	USING	0
			; SOURCE LINE # 38
; 	switch(_iso7816_cla) {
			; SOURCE LINE # 39
	MOV  	DPTR,#_iso7816_cla
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	LCALL	?C?CCASE
	DW   	?C0003
	DB   	0A0H
	DW   	?C0005
	DB   	0A6H
	DW   	00H
	DW   	?C0006
; 	 	case CLA_GSM11:
			; SOURCE LINE # 40
?C0003:
; 			return gsm_class_case[_iso7816_ins];
			; SOURCE LINE # 41
	MOV  	DPTR,#_iso7816_ins
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	MOV  	DPTR,#gsm_class_case
	MOVC 	A,@A+DPTR
	MOV  	R7,A
	RET  	
; 		case CLA_YGGDRASIL:
			; SOURCE LINE # 42
?C0005:
; 			return yggdrasil_class_case[_iso7816_ins];
			; SOURCE LINE # 43
	MOV  	DPTR,#_iso7816_ins
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	MOV  	DPTR,#yggdrasil_class_case
	MOVC 	A,@A+DPTR
	MOV  	R7,A
	RET  	
; 		default:
			; SOURCE LINE # 44
?C0006:
; 			return 0;			
			; SOURCE LINE # 45
	MOV  	R7,#00H
	RET  	
; 	}
			; SOURCE LINE # 46
?C0002:
; 	return 0;
			; SOURCE LINE # 47
	MOV  	R7,#00H
; }
			; SOURCE LINE # 48
?C0004:
	RET  	
; END OF ISO7816_case

; //====================================================
; //	Main process
; void ISO7816_main(void)

	RSEG  ?PR?ISO7816_main?ISO7816_MAIN
ISO7816_main:
	USING	0
			; SOURCE LINE # 51
; {
			; SOURCE LINE # 52
; 	//register uint16 i=0;
; 	//register uint16 len;
; 	uint16 sw;
; 	switch(_iso7816_state) {
			; SOURCE LINE # 56
	MOV  	DPTR,#_iso7816_state
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	LCALL	?C?CCASE
	DW   	?C0008
	DB   	00H
	DW   	?C0020
	DB   	01H
	DW   	?C0011
	DB   	02H
	DW   	?C0020
	DB   	03H
	DW   	?C0013
	DB   	04H
	DW   	?C0020
	DB   	07H
	DW   	?C0019
	DB   	0DH
	DW   	00H
	DW   	?C0020
; 	 	case ISO7816_DORMANT:
			; SOURCE LINE # 57
?C0008:
; 			IoInit(0x11);						//	H/W initial
			; SOURCE LINE # 58
	MOV  	R7,#011H
	LCALL	_IoInit
; 			Initialize_Hardware();
			; SOURCE LINE # 59
	LCALL	Initialize_Hardware
; 			Send_ATR();							//	Send ATR  
			; SOURCE LINE # 60
	LCALL	Send_ATR
; 			Initialize_Operating_System();
			; SOURCE LINE # 61
	LCALL	Initialize_Operating_System
; 			_iso7816_state = ISO7816_RECEIVE_CMD;
			; SOURCE LINE # 62
	MOV  	DPTR,#_iso7816_state
	MOV  	A,#03H
	MOVX 	@DPTR,A
; 			Sleep_Mode();
			; SOURCE LINE # 63
	LCALL	Sleep_Mode
; 			break;
			; SOURCE LINE # 64
	RET  	
; 		case ISO7816_READY:		
			; SOURCE LINE # 65
?C0009:
; 			//Sleep_Mode();			//	Power down mode after thread has been executed
; 			/*_iso7816_cla = iso7816_buffer[0] = receive_byte();		//CLA
; 			_iso7816_ins = iso7816_buffer[1] = receive_byte();		//INS
; 			iso7816_buffer[2] = receive_byte();		//P1
; 			iso7816_buffer[3] = receive_byte();		//P2
; 			iso7816_buffer[4] = receive_byte();		//P3
; 			len = (5 + iso7816_buffer[4]);
; 			
; 			if(len > 5) {
; 				//if(iso7816_buffer[1] == 0xA4) {
; 				send_byte(iso7816_buffer[1]);
; 				//send_byte(0);
; 				for(i=5;i<len;i++) {
; 					iso7816_buffer[i] = receive_byte();
; 				} 
; 				//}
; 			}
; 			//iso7816_buffer[5] = receive_byte();
; 			//iso7816_buffer[6] = receive_byte();
; 			_iso7816_state = ISO7816_RUNNING;  */
; 			break;
			; SOURCE LINE # 86
	RET  	
; 		case ISO7816_RECEIVE_CMD:
			; SOURCE LINE # 87
?C0010:
; 			/*if(_os_config.os_state & YGG_ST_LOAD_APP) {	   //load app into user program space
; 				//Sleep_Mode();	
; 				Load_User_App();
; 				_os_config.os_state &= ~(YGG_ST_LOAD_APP);
; 				Save_State();
; 			}
; 			if(_os_config.os_state & YGG_ST_SLEEP) {		   //sleep MCU
; 				Sleep_Mode();
; 				_os_config.os_state &= ~(YGG_ST_SLEEP);
; 			} */
; 			//do nothing
; 			break;
			; SOURCE LINE # 99
	RET  	
; 		case ISO7816_SEND_ACK:
			; SOURCE LINE # 100
?C0011:
; 			send_byte(iso7816_buffer[1]);			//send acknowledgement in order to and wait for data
			; SOURCE LINE # 101
	MOV  	DPTR,#iso7816_buffer+01H
	MOVX 	A,@DPTR
	MOV  	R7,A
	LCALL	_send_byte
; 			_iso7816_state = YGG_RECEIVE_DATA;
			; SOURCE LINE # 102
	MOV  	DPTR,#_iso7816_state
	MOV  	A,#07H
	MOVX 	@DPTR,A
; 			break;
			; SOURCE LINE # 103
	RET  	
; 		case ISO7816_RECEIVE_DATA:
			; SOURCE LINE # 104
?C0012:
; 			//do nothing
; 			break;
			; SOURCE LINE # 106
	RET  	
; 		case ISO7816_RUNNING:
			; SOURCE LINE # 107
?C0013:
; 			switch(iso7816_buffer[0]) {
			; SOURCE LINE # 108
	MOV  	DPTR,#iso7816_buffer
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	LCALL	?C?CCASE
	DW   	?C0015
	DB   	0FFH
	DW   	00H
	DW   	?C0016
; 				case 0xff:	 						//default iso7816 system class
			; SOURCE LINE # 109
?C0015:
; 					PPS_Handler(iso7816_buffer);
			; SOURCE LINE # 110
	MOV  	R6,#HIGH (iso7816_buffer)
	MOV  	R7,#LOW (iso7816_buffer)
	LCALL	_PPS_Handler
; 					break;
			; SOURCE LINE # 111
	LJMP 	?C0014
; 				default:
			; SOURCE LINE # 112
?C0016:
; 					TX_NULL_BYTE_ON(8000)
			; SOURCE LINE # 113
	MOV  	R5,#03FH
	MOV  	R4,#01FH
	MOV  	R7,#01H
	LCALL	_ISO_AutoTxNULL
; 					StartTimeoutSequence();
			; SOURCE LINE # 114
	LCALL	StartTimeoutSequence
; 					_iso7816_cla = iso7816_buffer[0];
			; SOURCE LINE # 115
	MOV  	DPTR,#iso7816_buffer
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	DPTR,#_iso7816_cla
	MOV  	A,R7
	MOVX 	@DPTR,A
; 					_iso7816_ins = iso7816_buffer[1];
			; SOURCE LINE # 116
	MOV  	DPTR,#iso7816_buffer+01H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	DPTR,#_iso7816_ins
	MOV  	A,R7
	MOVX 	@DPTR,A
; 					sw = Yggdrasil_Decode((apdu_command *)iso7816_buffer);
			; SOURCE LINE # 117
	MOV  	R3,#01H
	MOV  	R2,#HIGH (iso7816_buffer)
	MOV  	R1,#LOW (iso7816_buffer)
	LCALL	_Yggdrasil_Decode
	MOV  	DPTR,#sw?240
	MOV  	A,R6
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R7
	MOVX 	@DPTR,A
; 					
; 					if(_os_config.os_state & YGG_ST_LOAD_APP) {
			; SOURCE LINE # 119
	MOV  	DPTR,#_os_config+01H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	JNB  	ACC.3,?C0017
; 						if(Load_User_App() == APDU_SUCCESS) {
			; SOURCE LINE # 120
	LCALL	Load_User_App
	MOV  	A,R7
	CJNE 	A,#00H,?C0017
	MOV  	A,R6
	CJNE 	A,#090H,?C0017
; 							_os_config.os_state	&= ~YGG_ST_LOAD_APP;
			; SOURCE LINE # 121
	MOV  	DPTR,#_os_config+01H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F7H
	MOV  	R7,A
	MOV  	DPTR,#_os_config+01H
	MOV  	A,R7
	MOVX 	@DPTR,A
; 							Save_State();
			; SOURCE LINE # 122
	LCALL	Save_State
; 						}
			; SOURCE LINE # 123
?C0018:
; 					}
			; SOURCE LINE # 124
?C0017:
; 					EndTimeoutSequence();
			; SOURCE LINE # 125
	LCALL	EndTimeoutSequence
; 					TX_NULL_BYTE_OFF(8000)
			; SOURCE LINE # 126
	MOV  	R5,#03FH
	MOV  	R4,#01FH
	MOV  	R7,#00H
	LCALL	_ISO_AutoTxNULL
; 					ioman_transmit(response_length, _iso7816_ins, iso7816_buffer, sw);
			; SOURCE LINE # 127
	MOV  	DPTR,#response_length
	MOVX 	A,@DPTR
	MOV  	R7,A
	PUSH 	AR7
	MOV  	DPTR,#_iso7816_ins
	MOVX 	A,@DPTR
	MOV  	R5,A
	MOV  	R3,#01H
	MOV  	R2,#HIGH (iso7816_buffer)
	MOV  	R1,#LOW (iso7816_buffer)
	MOV  	DPTR,#sw?240
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	DPTR,#?_ioman_transmit?BYTE+05H
	MOV  	A,R6
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R7
	MOVX 	@DPTR,A
	POP  	AR7
	LCALL	_ioman_transmit
; 					//Response();
; 					//TxStatus(SWptr);					//	Tx SW
; 					break;
			; SOURCE LINE # 130
; 			}
			; SOURCE LINE # 131
?C0014:
; 			_iso7816_state = ISO7816_RECEIVE_CMD;
			; SOURCE LINE # 132
	MOV  	DPTR,#_iso7816_state
	MOV  	A,#03H
	MOVX 	@DPTR,A
; 			Sleep_Mode();
			; SOURCE LINE # 133
	LCALL	Sleep_Mode
; 			break;
			; SOURCE LINE # 134
	RET  	
; 		case ISO7816_STOP:
			; SOURCE LINE # 135
?C0019:
; 			EndTimeoutSequence();
			; SOURCE LINE # 136
	LCALL	EndTimeoutSequence
; 			TX_NULL_BYTE_OFF(8000)
			; SOURCE LINE # 137
	MOV  	R5,#03FH
	MOV  	R4,#01FH
	MOV  	R7,#00H
	LCALL	_ISO_AutoTxNULL
; 			ioman_transmit(0, _iso7816_ins, iso7816_buffer, APDU_FATAL_ERROR);
			; SOURCE LINE # 138
	MOV  	DPTR,#_iso7816_ins
	MOVX 	A,@DPTR
	MOV  	R5,A
	MOV  	R3,#01H
	MOV  	R2,#HIGH (iso7816_buffer)
	MOV  	R1,#LOW (iso7816_buffer)
	MOV  	DPTR,#?_ioman_transmit?BYTE+05H
	MOV  	A,#06FH
	MOVX 	@DPTR,A
	INC  	DPTR
	CLR  	A
	MOVX 	@DPTR,A
	MOV  	R7,#00H
	LCALL	_ioman_transmit
; 			_iso7816_state = ISO7816_RECEIVE_CMD;
			; SOURCE LINE # 139
	MOV  	DPTR,#_iso7816_state
	MOV  	A,#03H
	MOVX 	@DPTR,A
; 			Initialize_Operating_System();
			; SOURCE LINE # 140
	LCALL	Initialize_Operating_System
; 			break;
			; SOURCE LINE # 141
; 	}
			; SOURCE LINE # 142
?C0007:
; 	/*if(ISO7816_Time == 0)
; 	{
; 		IoInit(0x11);						//	H/W initial
; 		Send_ATR();							//	Send ATR
; 		PPSFlag = 0;  						//	Enable PPS
; 		ISO7816_Time ++;
; 		return;								//	Return to the main process after sending ATR	
; 	}
; 	if(RcvAPDU())							//	Rcv APDU,include PPS
; 	{	
; 		Foffset = (P1 << 8) + P2;			//	Start address of flash reading/writing
; 		SWptr = SUCCESS;					//	9000
; 
; 		TX_NULL_BYTE_ON(8000)
; 		CMMD_Handle();
; 		TX_NULL_BYTE_OFF(8000)
; 		
; 		Response();
; 		TxStatus(SWptr);					//	Tx SW
; 	} */
; }
			; SOURCE LINE # 163
?C0020:
	RET  	
; END OF ISO7816_main

; 
; //====================================================
; //	ISO/IEC 7816 commands handling
; void	Send_ATR(void)

	RSEG  ?PR?Send_ATR?ISO7816_MAIN
Send_ATR:
	USING	0
			; SOURCE LINE # 167
; {	
			; SOURCE LINE # 168
; 	Tx_n_Bytes(sizeof(ATR),ATR);
			; SOURCE LINE # 169
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (ATR)
	MOV  	R1,#LOW (ATR)
	MOV  	R7,#0DH
	MOV  	R6,#00H
	LCALL	_Tx_n_Bytes
; }
			; SOURCE LINE # 170
?C0021:
	RET  	
; END OF Send_ATR

; 
; //====================================================
; //	Receive APDU
; BYTE	RcvAPDU(void)

	RSEG  ?PR?RcvAPDU?ISO7816_MAIN
RcvAPDU:
	USING	0
			; SOURCE LINE # 174
; {
			; SOURCE LINE # 175
; 	iso7816_buffer[0] = receive_byte();
			; SOURCE LINE # 176
	LCALL	receive_byte
	MOV  	DPTR,#iso7816_buffer
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	if(iso7816_buffer[0] == 0xFF)
			; SOURCE LINE # 177
	MOV  	DPTR,#iso7816_buffer
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	XRL  	A,#0FFH
	JNZ  	?C0022
; 	{	
			; SOURCE LINE # 178
; 		iso7816_buffer[1] = receive_byte();
			; SOURCE LINE # 179
	LCALL	receive_byte
	MOV  	DPTR,#iso7816_buffer+01H
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		iso7816_buffer[2] = receive_byte();
			; SOURCE LINE # 180
	LCALL	receive_byte
	MOV  	DPTR,#iso7816_buffer+02H
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		iso7816_buffer[3] = receive_byte();
			; SOURCE LINE # 181
	LCALL	receive_byte
	MOV  	DPTR,#iso7816_buffer+03H
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		if(iso7816_buffer[1] == 0x10 && PPSFlag == 0)		//	PPS
			; SOURCE LINE # 182
	MOV  	DPTR,#iso7816_buffer+01H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	XRL  	A,#010H
	JZ   	$ + 5H
	LJMP 	?C0024
	MOV  	DPTR,#PPSFlag
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	JZ   	$ + 5H
	LJMP 	?C0024
; 		{	
			; SOURCE LINE # 183
; 			PPS();							//	Set baud rate
			; SOURCE LINE # 184
	LCALL	PPS
; 			PPSFlag = 1;					//	PPS is enabled for the 1st time only
			; SOURCE LINE # 185
	MOV  	DPTR,#PPSFlag
	MOV  	A,#01H
	MOVX 	@DPTR,A
; 		}
			; SOURCE LINE # 186
?C0023:
; 	}
			; SOURCE LINE # 187
	SJMP 	?C0024
?C0022:
; 	else if(iso7816_buffer[0] == 0x00)
			; SOURCE LINE # 188
	MOV  	DPTR,#iso7816_buffer
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	JNZ  	?C0024
; 	{	
			; SOURCE LINE # 189
; 		iso7816_buffer[1] = receive_byte();
			; SOURCE LINE # 190
	LCALL	receive_byte
	MOV  	DPTR,#iso7816_buffer+01H
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		iso7816_buffer[2] = receive_byte();
			; SOURCE LINE # 191
	LCALL	receive_byte
	MOV  	DPTR,#iso7816_buffer+02H
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		iso7816_buffer[3] = receive_byte();
			; SOURCE LINE # 192
	LCALL	receive_byte
	MOV  	DPTR,#iso7816_buffer+03H
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		iso7816_buffer[4] = receive_byte();
			; SOURCE LINE # 193
	LCALL	receive_byte
	MOV  	DPTR,#iso7816_buffer+04H
	MOV  	A,R7
	MOVX 	@DPTR,A
; 
; 		if((iso7816_buffer[1] == WRFLASH || iso7816_buffer[1] == UDFLASH || iso7816_buffer[1] == ERFLASH || (iso7816_buffer[1] == DESOPER && iso7816_buffer[3] != 0x10)) && iso7816_buffer[4] != 0) 
			; SOURCE LINE # 195
	MOV  	DPTR,#iso7816_buffer+01H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	XRL  	A,#058H
	JZ   	?C0027
	MOV  	DPTR,#iso7816_buffer+01H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	XRL  	A,#05CH
	JZ   	?C0027
	MOV  	DPTR,#iso7816_buffer+01H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	XRL  	A,#02EH
	JZ   	?C0027
	MOV  	DPTR,#iso7816_buffer+01H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	CJNE 	A,#056H,?C0026
	MOV  	DPTR,#iso7816_buffer+03H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	XRL  	A,#010H
	JZ   	?C0026
?C0027:
	MOV  	DPTR,#iso7816_buffer+04H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	JZ   	?C0026
; 		{								
			; SOURCE LINE # 196
; 			send_byte(iso7816_buffer[1]);
			; SOURCE LINE # 197
	MOV  	DPTR,#iso7816_buffer+01H
	MOVX 	A,@DPTR
	MOV  	R7,A
	LCALL	_send_byte
; 			Rx_n_Bytes(iso7816_buffer[4]);
			; SOURCE LINE # 198
	MOV  	DPTR,#iso7816_buffer+04H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	R6,#00H
	LCALL	_Rx_n_Bytes
; 		}
			; SOURCE LINE # 199
?C0026:
; 		return	1;
			; SOURCE LINE # 200
	MOV  	R7,#01H
	RET  	
; 	}
			; SOURCE LINE # 201
?C0025:
?C0024:
; 	return	0;
			; SOURCE LINE # 202
	MOV  	R7,#00H
; }
			; SOURCE LINE # 203
?C0028:
	RET  	
; END OF RcvAPDU

; 
; //====================================================
; //	ISO/IEC 7816 commands handling
; //	Format: 00 5x P1 P2 P3 
; 
; USHORT	Command_Interpreter(BYTEX * buffer) {

	RSEG  ?PR?_Command_Interpreter?ISO7816_MAIN
_Command_Interpreter:
	USING	0
			; SOURCE LINE # 209
	MOV  	DPTR,#buffer?541
	MOV  	A,R6
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R7
	MOVX 	@DPTR,A
;  	switch(buffer[0]) {
			; SOURCE LINE # 210
	MOV  	DPTR,#buffer?541
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	DPL,R7
	MOV  	DPH,R6
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	LCALL	?C?CCASE
	DW   	?C0030
	DB   	0A0H
	DW   	00H
	DW   	?C0032
; 	 	//case 0xff:
; 			//return PPS_Handler(buffer);
; 		case 0xa0:
			; SOURCE LINE # 213
?C0030:
; 			return GSM_Handler(buffer);
			; SOURCE LINE # 214
	MOV  	DPTR,#buffer?541
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R7,A
	LCALL	_GSM_Handler
	RET  	
; 		default:
			; SOURCE LINE # 215
?C0032:
; 			return APDU_CLASS_INVALID;	
			; SOURCE LINE # 216
	MOV  	R6,#06EH
	MOV  	R7,#00H
; 	}
			; SOURCE LINE # 217
?C0029:
; }
			; SOURCE LINE # 218
?C0031:
	RET  	
; END OF _Command_Interpreter

; 
; USHORT GSM_Handler(BYTEX * buffer) {

	RSEG  ?PR?_GSM_Handler?ISO7816_MAIN
_GSM_Handler:
	USING	0
			; SOURCE LINE # 220
	MOV  	DPTR,#buffer?642
	MOV  	A,R6
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R7
	MOVX 	@DPTR,A
;  	switch(buffer[1]) {
			; SOURCE LINE # 221
	MOV  	DPTR,#buffer?642
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	DPL,R7
	MOV  	DPH,R6
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R7,A
	SJMP 	?C0034
; 	 	/*case 0xA4:		//select file
; 			return APDU_SUCCESS_RESPONSE;
; 		case 0xF2:	 	//status
; 			return APDU_SUCCESS;
; 		case 0xB0:		//read binary
; 			return APDU_SUCCESS;
; 		case 0x*/
; 		default:
			; SOURCE LINE # 229
?C0034:
; 			return APDU_INSTRUCTION_INVALID;
			; SOURCE LINE # 230
	MOV  	R6,#06DH
	MOV  	R7,#00H
; 	}
			; SOURCE LINE # 231
?C0033:
; }
			; SOURCE LINE # 232
?C0035:
	RET  	
; END OF _GSM_Handler

; 
; USHORT PPS_Handler(BYTEX * buffer) {

	RSEG  ?PR?_PPS_Handler?ISO7816_MAIN
_PPS_Handler:
	USING	0
			; SOURCE LINE # 234
	MOV  	DPTR,#buffer?743
	MOV  	A,R6
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	switch(buffer[1]) {
			; SOURCE LINE # 235
	MOV  	DPTR,#buffer?743
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	DPL,R7
	MOV  	DPH,R6
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	LCALL	?C?CCASE
	DW   	?C0037
	DB   	010H
	DW   	00H
	DW   	?C0039
; 		case 0x10:
			; SOURCE LINE # 236
?C0037:
; 			Set_PPS(buffer);
			; SOURCE LINE # 237
	MOV  	DPTR,#buffer?743
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R7,A
	LCALL	_Set_PPS
; 			return APDU_SUCCESS;
			; SOURCE LINE # 238
	MOV  	R6,#090H
	MOV  	R7,#00H
	RET  	
; 		default:   
			; SOURCE LINE # 239
?C0039:
;  			return APDU_INSTRUCTION_INVALID;
			; SOURCE LINE # 240
	MOV  	R6,#06DH
	MOV  	R7,#00H
; 	}
			; SOURCE LINE # 241
?C0036:
; }
			; SOURCE LINE # 242
?C0038:
	RET  	
; END OF _PPS_Handler

; 
; void	CMMD_Handle(void)

	RSEG  ?PR?CMMD_Handle?ISO7816_MAIN
CMMD_Handle:
	USING	0
			; SOURCE LINE # 244
; {	
			; SOURCE LINE # 245
; 	/*switch(INS)
; 	{	
; 		case	WRFLASH:	Write_Bytes((BYTEX *)Foffset,IOBuf,P3);					
; 																break;
; 
; 		case	ERFLASH:	Erase_Pages(Foffset,*(HALFWX *)IOBuf);					
; 																break;
; 								
; 		case	CHGBASE:	SetBase(P2);						break;							
; 								
; 		case	CRCCALL:	CalCRC(IOBuf,(BYTEX *)Foffset,P3);	break;
; 
; 		case	RDFLASH:   	ReadFlash(IOBuf,Foffset,P3);		break;
; 		
; 		case	UDFLASH:	UpdateFlash(Foffset,IOBuf,P3);		break;
; 
; 		case	DESOPER:	if(DES_Operation(P1,P2,IOBuf,P3) == 0)
; 								SWptr = P1P2ERR;
; 		case	0xF0:		ReturnToBL();						break;
; 
; 		case	GETRDMN:	Random_Number_Generator(IOBuf,P3);	break;
; 										   	
; 		default:			SWptr = IVDINS;						break;		//	6D00							
; 						
; 	} */
; }
			; SOURCE LINE # 271
?C0040:
	RET  	
; END OF CMMD_Handle

; 
; //====================================================
; //	Send status word
; void	TxStatus(unsigned char ptr)

	RSEG  ?PR?_TxStatus?ISO7816_MAIN
_TxStatus:
	USING	0
			; SOURCE LINE # 275
	MOV  	DPTR,#ptr?944
	MOV  	A,R7
	MOVX 	@DPTR,A
; {
			; SOURCE LINE # 276
; 	Tx_n_Bytes(2,SW+ptr);
			; SOURCE LINE # 277
	MOV  	DPTR,#ptr?944
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,#LOW (SW)
	ADD  	A,R7
	MOV  	R1,A
	CLR  	A
	ADDC 	A,#HIGH (SW)
	MOV  	R2,A
	MOV  	R3,#0FFH
	MOV  	R7,#02H
	MOV  	R6,#00H
	LCALL	_Tx_n_Bytes
; }
			; SOURCE LINE # 278
?C0041:
	RET  	
; END OF _TxStatus

	END
