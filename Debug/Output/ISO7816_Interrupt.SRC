; .\Debug\Output\ISO7816_Interrupt.SRC generated from: ISO7816\ISO7816_Interrupt.c
; COMPILER INVOKED BY:
;        C:\Keil51\C51\BIN\C51.EXE ISO7816\ISO7816_Interrupt.c LARGE OMF2 OPTIMIZE(0,SIZE) BROWSE NOINTVECTOR DEBUG PRINT(.\Debug\List\ISO7816_Interrupt.lst) SRC(.\Debug\Output\ISO7816_Interrupt.SRC)

$NOMOD51

NAME	ISO7816_INTERRUPT

UIMSK	DATA	0DCH
FL_SDP1	DATA	0E9H
FL_SDP2	DATA	0EAH
DPH0	DATA	083H
IE_INT3	BIT	0A8H.3
IE	DATA	0A8H
DPH1	DATA	085H
IE_INT5	BIT	0A8H.5
DPL0	DATA	082H
DPL1	DATA	084H
IE_TMR0	BIT	0A8H.1
DES_END	BIT	0C0H.3
IP	DATA	0B8H
UCR2	DATA	0DEH
UCR3	DATA	0DDH
FL_STS_F_CHKFF_ERR	BIT	0E8H.2
SP	DATA	081H
DES_DATEN	BIT	0C0H.5
IE_UART	BIT	0A8H.2
UBRC	DATA	0DAH
PCON	DATA	087H
FL_STS_F_OVER	BIT	0E8H.0
CRCDAT	DATA	0C2H
UBUF	DATA	0D9H
TMOD	DATA	089H
TCON	DATA	088H
MMU_SEL	DATA	0C3H
USR_TBE	BIT	0D8H.0
CLKCON	DATA	086H
CHIPSC	DATA	0DBH
CLKSEL	DATA	08FH
DESCTL	DATA	0C0H
B	DATA	0F0H
RNGDAT	DATA	0E2H
ACC	DATA	0E0H
IE_DES	BIT	0A8H.0
RNGCTL	DATA	0E1H
TH0	DATA	08CH
DES_START	BIT	0C0H.0
TL0	DATA	08AH
WDTCON	DATA	0A5H
DESD0	DATA	0F8H
DESD1	DATA	0F9H
DESD2	DATA	0FAH
FL_CON	DATA	0EBH
DESD3	DATA	0FBH
SFR80	DATA	080H
DESD4	DATA	0FCH
SFR90	DATA	090H
SFR81	DATA	081H
DESD5	DATA	0FDH
SFR91	DATA	091H
SFR82	DATA	082H
DESD6	DATA	0FEH
SFR92	DATA	092H
SFR83	DATA	083H
DESD7	DATA	0FFH
SFR93	DATA	093H
SFR84	DATA	084H
SFR94	DATA	094H
SFR85	DATA	085H
SFR95	DATA	095H
SFR86	DATA	086H
SFR96	DATA	096H
SFR87	DATA	087H
DPH	DATA	083H
SFR97	DATA	097H
SFR88	DATA	088H
SFRA0	DATA	0A0H
SFR98	DATA	098H
SFR89	DATA	089H
FL_STS_F_OP_ERR	BIT	0E8H.1
IE_FLASH	BIT	0A8H.4
IE_WDT	BIT	0A8H.6
SFRB0	DATA	0B0H
SFRA1	DATA	0A1H
SFR99	DATA	099H
SFRC0	DATA	0C0H
SFRB1	DATA	0B1H
SFRA2	DATA	0A2H
TCON_TF0	BIT	088H.5
DPL	DATA	082H
SFRD0	DATA	0D0H
SFRC1	DATA	0C1H
SFRB2	DATA	0B2H
SFRA3	DATA	0A3H
SFRE0	DATA	0E0H
SFRD1	DATA	0D1H
SFRC2	DATA	0C2H
SFRB3	DATA	0B3H
SFRA4	DATA	0A4H
BANK_SEL	DATA	0EFH
SFRF0	DATA	0F0H
SFRE1	DATA	0E1H
SFRD2	DATA	0D2H
SFRC3	DATA	0C3H
SFRB4	DATA	0B4H
SFRA5	DATA	0A5H
DES_MODE	BIT	0C0H.1
SFRF1	DATA	0F1H
SFRE2	DATA	0E2H
SFRD3	DATA	0D3H
SFRC4	DATA	0C4H
SFRB5	DATA	0B5H
SFRA6	DATA	0A6H
FL_PATCH	DATA	0E7H
SFRF2	DATA	0F2H
SFRE3	DATA	0E3H
SFRD4	DATA	0D4H
SFRC5	DATA	0C5H
SFRB6	DATA	0B6H
SFRA7	DATA	0A7H
SFRF3	DATA	0F3H
SFRE4	DATA	0E4H
SFRD5	DATA	0D5H
SFRC6	DATA	0C6H
SFRB7	DATA	0B7H
SFRA8	DATA	0A8H
SFR8A	DATA	08AH
SFRF4	DATA	0F4H
SFRE5	DATA	0E5H
SFRD6	DATA	0D6H
SFRC7	DATA	0C7H
SFRB8	DATA	0B8H
SFRA9	DATA	0A9H
SFR9A	DATA	09AH
SFR8B	DATA	08BH
DPS	DATA	0A2H
SFRF5	DATA	0F5H
SFRE6	DATA	0E6H
SFRD7	DATA	0D7H
SFRC8	DATA	0C8H
SFRB9	DATA	0B9H
SFR9B	DATA	09BH
SFR8C	DATA	08CH
SFRF6	DATA	0F6H
SFRE7	DATA	0E7H
SFRD8	DATA	0D8H
SFRC9	DATA	0C9H
SFR9C	DATA	09CH
SFR8D	DATA	08DH
SFRF7	DATA	0F7H
SFRE8	DATA	0E8H
SFRD9	DATA	0D9H
SFR9D	DATA	09DH
SFR8E	DATA	08EH
WDTRST	DATA	0A6H
UCR	DATA	0DFH
SFRF8	DATA	0F8H
SFRE9	DATA	0E9H
SFR9E	DATA	09EH
SFR8F	DATA	08FH
FDCON	DATA	0E3H
SFRF9	DATA	0F9H
SFR9F	DATA	09FH
DES_KEY1EN	BIT	0C0H.6
TCON_TR0	BIT	088H.4
DES_KEY2EN	BIT	0C0H.7
FL_STS	DATA	0E8H
DES_TDES	BIT	0C0H.2
BANK_NUM	DATA	0EEH
SFRAA	DATA	0AAH
SFRBA	DATA	0BAH
SFRAB	DATA	0ABH
SFRCA	DATA	0CAH
SFRBB	DATA	0BBH
SFRAC	DATA	0ACH
SFRDA	DATA	0DAH
SFRCB	DATA	0CBH
SFRBC	DATA	0BCH
SFRAD	DATA	0ADH
rP0	DATA	080H
SFREA	DATA	0EAH
SFRDB	DATA	0DBH
SFRCC	DATA	0CCH
SFRBD	DATA	0BDH
SFRAE	DATA	0AEH
rP1	DATA	090H
SFRFA	DATA	0FAH
SFREB	DATA	0EBH
SFRDC	DATA	0DCH
SFRCD	DATA	0CDH
SFRBE	DATA	0BEH
SFRAF	DATA	0AFH
IE_EA	BIT	0A8H.7
rP2	DATA	0A0H
SFRFB	DATA	0FBH
SFREC	DATA	0ECH
SFRDD	DATA	0DDH
SFRCE	DATA	0CEH
SFRBF	DATA	0BFH
rP3	DATA	0B0H
SFRFC	DATA	0FCH
SFRED	DATA	0EDH
SFRDE	DATA	0DEH
SFRCF	DATA	0CFH
SFRFD	DATA	0FDH
SFREE	DATA	0EEH
SFRDF	DATA	0DFH
SFRFE	DATA	0FEH
SFREF	DATA	0EFH
SFRFF	DATA	0FFH
USR	DATA	0D8H
SLEEP	DATA	097H
PSW	DATA	0D0H
VDCON	DATA	0DBH
?PR?DES_ISR?ISO7816_INTERRUPT            SEGMENT CODE 
?PR?UART_ISR?ISO7816_INTERRUPT           SEGMENT CODE 
?PR?INT3_ISR?ISO7816_INTERRUPT           SEGMENT CODE 
?PR?FLASH_ISR?ISO7816_INTERRUPT          SEGMENT CODE 
?PR?INT5_ISR?ISO7816_INTERRUPT           SEGMENT CODE 
?PR?WDT_ISR?ISO7816_INTERRUPT            SEGMENT CODE 
?C_INITSEG           SEGMENT CODE 
?XD?ISO7816_INTERRUPT                    SEGMENT XDATA 
	EXTRN	XDATA (iso7816_buffer)
	EXTRN	XDATA (_iso7816_state)
	EXTRN	CODE (_?ISO_AutoTxNULL)
	PUBLIC	WDT_ISR
	PUBLIC	INT5_ISR
	PUBLIC	FLASH_ISR
	PUBLIC	INT3_ISR
	PUBLIC	UART_ISR
	PUBLIC	DES_ISR

	RSEG  ?XD?ISO7816_INTERRUPT
      rcv_index:   DS   1

	RSEG  ?C_INITSEG
	DB	041H
	DW	rcv_index
	DB	000H

; 
; #include	"_17BD_UserCode.h"  
; #include 	"defs.h"
; #include	"..\ISO7816\ISO7816.h"
; #include	"..\NORFlash\NORFlash.h"
; #include 	"..\yggdrasil\yggdrasil.h"
; #include	<intrins.h>
; 
; //====================================================
; //	DES finish interrutp service routine
; void	DES_ISR(void)	interrupt 0

	RSEG  ?PR?DES_ISR?ISO7816_INTERRUPT
	USING	0
DES_ISR:
	USING	0
			; SOURCE LINE # 11
; {
; 	IE_DES = 0;
			; SOURCE LINE # 13
	CLR  	IE_DES
; 	return;
; }
			; SOURCE LINE # 15
?C0001:
	RETI 	
; END OF DES_ISR

; 
; //uint16 _tick_counter;
; static uchar rcv_index = 0;
; #define apdu_data_buffer (iso7816_buffer+5)
; #define apdu_le_value *(iso7816_buffer+262)
; //====================================================
; //	UART interrutp service routine
; void	UART_ISR(void)	interrupt 2

	RSEG  ?PR?UART_ISR?ISO7816_INTERRUPT
	USING	0
UART_ISR:
	PUSH 	ACC
	PUSH 	DPH
	PUSH 	DPL
	PUSH 	PSW
	MOV  	PSW,#00H
	PUSH 	AR6
	PUSH 	AR7
	USING	0
			; SOURCE LINE # 23
; {
; 	IE_UART = 0;  
			; SOURCE LINE # 25
	CLR  	IE_UART
; 	//switch(_iso7816_state) {
; 		//case ISO7816_RECEIVE_CMD:	
; 	if(_iso7816_state == ISO7816_RECEIVE_CMD) { 
			; SOURCE LINE # 28
	MOV  	DPTR,#_iso7816_state
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	XRL  	A,#03H
	JNZ  	?C0002
; 			iso7816_buffer[rcv_index++] = UBUF;
			; SOURCE LINE # 29
	MOV  	DPTR,#rcv_index
	MOVX 	A,@DPTR
	MOV  	R7,A
	INC  	A
	MOVX 	@DPTR,A
	MOV  	A,#LOW (iso7816_buffer)
	ADD  	A,R7
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (iso7816_buffer)
	MOV  	DPH,A
	MOV  	A,UBUF
	MOVX 	@DPTR,A
; 			if(rcv_index == 5) {
			; SOURCE LINE # 30
	MOV  	DPTR,#rcv_index
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	CJNE 	A,#05H,?C0003
; 				//_iso7816_case = 1;			//command only			 
; 				/*_iso7816_cla = iso7816_buffer[0];
; 				_iso7816_ins = iso7816_buffer[1];
; 				if(ISO7816_case() > 1) {   		//check for command with data
; 					_iso7816_state = ISO7816_SEND_ACK;
; 					rcv_index =0;
; 				} else {
; 					_iso7816_state = ISO7816_RUNNING;
; 					rcv_index=0;
; 				}*/
; 				rcv_index=0; 
			; SOURCE LINE # 41
	MOV  	DPTR,#rcv_index
	CLR  	A
	MOVX 	@DPTR,A
; 				//apdu_le_value = 0;
; 				_iso7816_state = ISO7816_RUNNING;
			; SOURCE LINE # 43
	MOV  	DPTR,#_iso7816_state
	MOV  	A,#04H
	MOVX 	@DPTR,A
; 			} 
			; SOURCE LINE # 44
?C0003:
; 			if(iso7816_buffer[0] == 0xff && rcv_index == 4) { 	//pps
			; SOURCE LINE # 45
	MOV  	DPTR,#iso7816_buffer
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	XRL  	A,#0FFH
	JNZ  	?C0005
	MOV  	DPTR,#rcv_index
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	XRL  	A,#04H
	JNZ  	?C0005
; 				rcv_index=0;  
			; SOURCE LINE # 46
	MOV  	DPTR,#rcv_index
	CLR  	A
	MOVX 	@DPTR,A
; 				_iso7816_state = ISO7816_RUNNING;	
			; SOURCE LINE # 47
	MOV  	DPTR,#_iso7816_state
	MOV  	A,#04H
	MOVX 	@DPTR,A
; 			}  
			; SOURCE LINE # 48
?C0004:
; 			//break;
; 	} else if(_iso7816_state == ISO7816_RECEIVE_DATA) {
			; SOURCE LINE # 50
	SJMP 	?C0005
?C0002:
	MOV  	DPTR,#_iso7816_state
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	CJNE 	A,#07H,?C0005
; 		//case ISO7816_RECEIVE_DATA: 	  
; 			apdu_data_buffer[rcv_index++] = UBUF;
			; SOURCE LINE # 52
	MOV  	DPTR,#rcv_index
	MOVX 	A,@DPTR
	MOV  	R7,A
	INC  	A
	MOVX 	@DPTR,A
	MOV  	A,#LOW (iso7816_buffer+05H)
	ADD  	A,R7
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (iso7816_buffer+05H)
	MOV  	DPH,A
	MOV  	A,UBUF
	MOVX 	@DPTR,A
; 			if(rcv_index == iso7816_buffer[4]) {
			; SOURCE LINE # 53
	MOV  	DPTR,#iso7816_buffer+04H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	DPTR,#rcv_index
	MOVX 	A,@DPTR
	MOV  	R6,A
	MOV  	A,R6
	CJNE 	A,AR7,?C0005
; 				//apdu_le_value = 0;
; 				_iso7816_state = ISO7816_RUNNING;
			; SOURCE LINE # 55
	MOV  	DPTR,#_iso7816_state
	MOV  	A,#04H
	MOVX 	@DPTR,A
; 				rcv_index=0;
			; SOURCE LINE # 56
	MOV  	DPTR,#rcv_index
	CLR  	A
	MOVX 	@DPTR,A
; 			}
			; SOURCE LINE # 57
?C0007:
; 			//break;	
; 		/*case ISO7816_WAIT_LE:
; 			apdu_le_value = UBUF;
; 			_iso7816_state = ISO7816_RUNNING;
; 			rcv_index=0;
; 			break; */
; 	}
			; SOURCE LINE # 64
?C0006:
?C0005:
; 	IE_UART = 1;
			; SOURCE LINE # 65
	SETB 	IE_UART
; 	return;
; }
			; SOURCE LINE # 67
?C0008:
	POP  	AR7
	POP  	AR6
	POP  	PSW
	POP  	DPL
	POP  	DPH
	POP  	ACC
	RETI 	
; END OF UART_ISR

; 
; //====================================================
; //	Interrutp 3 interrutp service routine
; void	INT3_ISR(void)	interrupt 3

	RSEG  ?PR?INT3_ISR?ISO7816_INTERRUPT
	USING	0
INT3_ISR:
	USING	0
			; SOURCE LINE # 71
; {
; 	IE_INT3 = 0;
			; SOURCE LINE # 73
	CLR  	IE_INT3
; 	return;
; }
			; SOURCE LINE # 75
?C0009:
	RETI 	
; END OF INT3_ISR

; 
; //====================================================
; //	Flash write finish interrutp service routine
; void	FLASH_ISR(void)	interrupt 4

	RSEG  ?PR?FLASH_ISR?ISO7816_INTERRUPT
	USING	0
FLASH_ISR:
	USING	0
			; SOURCE LINE # 79
; {
; 	IE_FLASH = 0;
			; SOURCE LINE # 81
	CLR  	IE_FLASH
; 	return;
; }
			; SOURCE LINE # 83
?C0010:
	RETI 	
; END OF FLASH_ISR

; 
; //====================================================
; //	Interrutp 5 service routine
; void	INT5_ISR(void)	interrupt 5

	RSEG  ?PR?INT5_ISR?ISO7816_INTERRUPT
	USING	0
INT5_ISR:
	USING	0
			; SOURCE LINE # 87
; {
; 	IE_INT5 = 0;
			; SOURCE LINE # 89
	CLR  	IE_INT5
; 	return;
; }
			; SOURCE LINE # 91
?C0011:
	RETI 	
; END OF INT5_ISR

; 
; //====================================================
; //	Watch dog interrutp service routine
; void	WDT_ISR(void)	interrupt 6

	RSEG  ?PR?WDT_ISR?ISO7816_INTERRUPT
	USING	0
WDT_ISR:
	PUSH 	ACC
	PUSH 	B
	PUSH 	DPH
	PUSH 	DPL
	PUSH 	PSW
	MOV  	PSW,#00H
	PUSH 	AR0
	PUSH 	AR1
	PUSH 	AR2
	PUSH 	AR3
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	USING	0
			; SOURCE LINE # 95
; {
; 	IE_WDT = 0;
			; SOURCE LINE # 97
	CLR  	IE_WDT
; 	TX_NULL_BYTE_OFF(8000)
			; SOURCE LINE # 98
	MOV  	R4,#01FH
	MOV  	R5,#03FH
	MOV  	R7,#00H
	LCALL	_?ISO_AutoTxNULL
; 	IE_WDT = 1;
			; SOURCE LINE # 99
	SETB 	IE_WDT
; 	return;
; }
			; SOURCE LINE # 101
?C0012:
	POP  	AR7
	POP  	AR6
	POP  	AR5
	POP  	AR4
	POP  	AR3
	POP  	AR2
	POP  	AR1
	POP  	AR0
	POP  	PSW
	POP  	DPL
	POP  	DPH
	POP  	B
	POP  	ACC
	RETI 	
; END OF WDT_ISR

	END
